repeat wait() until game:IsLoaded()
loadstring((game:HttpGet("https://raw.githubusercontent.com/caydenthekile/scripts/main/favui")))()
local esp = loadstring(game:HttpGet("https://raw.githubusercontent.com/caydenthekile/scripts/main/esp"))()
local file = "W.o.U's Custom Folder"
local ply = game.Players.LocalPlayer
local queue_on_teleport = queue_on_teleport or syn and syn.queue_on_teleport or fluxus and fluxus.queue_on_teleport
local httprequest = (syn and syn.request) or (http and http.request) or http_request or (fluxus and fluxus.request) or request
local gamename = 'Preset'
local flags = library.flags
getgenv().WoUStuff = {
     autosave = false,
     farm = false,
     noclip = false,
     esp = false,
     boxes = false,
     players = false,
     names = false,
     espcolor = nil,
}
if not isfile(file) then
     makefolder(file)
  end
if not isfile("W.o.U's Custom Folder//"..'UI Configs') then
     makefolder("W.o.U's Custom Folder//"..'UI Configs')
end
if not isfile("W.o.U's Custom Folder//"..'UI Configs//'..game.Players.LocalPlayer.Name.."_"..gamename.."_".."autosave.json") then 
     writefile("W.o.U's Custom Folder//"..'UI Configs//'..game.Players.LocalPlayer.Name.."_"..gamename.."_".."autosave.json",game.HttpService:JSONEncode(WoUStuff)) 
end
for i,v in next,game.HttpService:JSONDecode(readfile("W.o.U's Custom Folder//"..'UI Configs//'..game.Players.LocalPlayer.Name.."_"..gamename.."_".."autosave.json")) do
     if not table.find(WoUStuff,i) then 
         writefile("W.o.U's Custom Folder//"..'UI Configs//'..game.Players.LocalPlayer.Name.."_"..gamename.."_".."autosave.json",game.HttpService:JSONEncode(WoUStuff))
     end
end
WoUStuff = game.HttpService:JSONDecode(readfile("W.o.U's Custom Folder//"..'UI Configs//'..game.Players.LocalPlayer.Name.."_"..gamename.."_".."autosave.json"))
for _,v in next,getconnections(ply.Idled) do
     v:Disable()
end
function nc()
     if game.Players.LocalPlayer.Character ~= nil then
          for i, v in pairs(game.Players.LocalPlayer.Character:GetChildren()) do
               if v:IsA("BasePart") then
                    v.CanCollide = false
                    v.Velocity = Vector3.new(0, 0, 0)
               end
          end
     end
end
function t(A, B, C)
     if A then
         local Time = (B.p - A.Position).magnitude / C
         local Info = TweenInfo.new(Time, Enum.EasingStyle.Linear)
         local Tween = game:GetService("TweenService"):Create(A, Info, {CFrame = B})
         Tween:Play()
     end
end
function click()
     game:GetService('VirtualInputManager'):SendMouseButtonEvent(0,0,0,true,game,0)
     task.wait()
     game:GetService('VirtualInputManager'):SendMouseButtonEvent(0,0,0,false,game,0)
end
function serverhop()
     if httprequest then
          local servers = {}
          local req = httprequest({Url = string.format("https://games.roblox.com/v1/games/%s/servers/Public?sortOrder=Asc&limit=100", game.placeId)})
          local body = game:GetService'HttpService':JSONDecode(req.Body)
          if body and body.data then
               for _, v in next, body.data do
                    if type(v) == "table" and tonumber(v.playing) and tonumber(v.maxPlayers) and v.playing < v.maxPlayers and v.id ~= game.JobId then
                         table.insert(servers,1,v.id)
                    end
               end
          end
          if #servers > 0 then
               game:GetService("TeleportService"):TeleportToPlaceInstance(game.PlaceId, servers[math.random(1,#servers)], game.Players.LocalPlayer)
          else
               print('failed')
          end
     end
end
function rejoin()
     game:GetService'TeleportService'.TeleportToPlaceInstance(game.PlaceId,game.JobId,ply)
end
game.Players.PlayerRemoving:Connect(function(player)
     if player == ply then
         rejoin()
     end
end)
function die()
     local char = game.Players.LocalPlayer.Character
     if char:FindFirstChildOfClass("Humanoid") then char:FindFirstChildOfClass("Humanoid"):ChangeState(15) end
     char:ClearAllChildren()
     local newChar = Instance.new("Model")
     newChar.Parent = workspace
     game.Players.LocalPlayer.Character = newChar
     task.wait()
     game.Players.LocalPlayer.Character = char
     newChar:Destroy()
 end
 --code here

 -- [Library Settings UI] -----------------------------------------------------------------------------------------------------------------------------------------------------
local farms = library:AddTab('Farms')
local misc = library:AddTab('Misc/Other')
local SettingsTab = library:AddTab("Settings");
local fcolumn = farms:AddColumn();
local fcolumn2 = farms:AddColumn();
local mcolumn = misc:AddColumn();
local mcolumn2 = misc:AddColumn();
local SettingsColumn = SettingsTab:AddColumn();
local SettingsColumn2 = SettingsTab:AddColumn();
local fsect = fcolumn:AddSection('Main')
local fsect2 = fcolumn2:AddSection('Other')
local msect = mcolumn:AddSection('Main')
local msect2 = mcolumn2:AddSection('Other')
local msect3 = mcolumn2:AddSection('More')
local SettingSection = SettingsColumn:AddSection("Menu");
local ConfigSection = SettingsColumn2:AddSection("Configs");
fsect:AddToggle({text = 'Strength Farm',state = WoUStuff.farm,flag = 'farm',callback = function(value)
     WoUStuff.farm = value
     spawn(function()
          while WoUStuff.farm and task.wait() do
          end
     end)
end})
fsect:AddToggle({text = 'Durability Farm',tip = 'Buy Self Punch First',state = WoUStuff.durfarm,flag = 'farm',callback = function(value)
     WoUStuff.durfarm = value
     spawn(function()
          while WoUStuff.durfarm and task.wait() do
               if ply.Character ~= nil then
                    if ply.Character:WaitForChild('Humanoid').Health > 10 then
                         getdur()
                         game:GetService'VirtualUser':ClickButton1(Vector2.new(0,0),workspace.CurrentCamera.CFrame)
                    else
                         ply.Character.Humanoid:ChangeState(15)
                    end
               end
          end
     end)
end})
fsect2:AddToggle({text = 'esp',state = WoUStuff.esp,callback = function(value)
     WoUStuff.esp = value
     esp:Toggle(WoUStuff.esp)
end})
fsect2:AddToggle({text = 'Players',state = WoUStuff.players,callback = function(value)
     WoUStuff.players = value
     esp.Players = WoUStuff.players
end})
fsect2:AddToggle({text = 'Boxes',state = WoUStuff.boxes,callback = function(value)
     WoUStuff.boxes = value 
     esp.Boxes = WoUStuff.boxes
end})
fsect2:AddToggle({text = 'Names',state = WoUStuff.names,callback = function(value)
     WoUStuff.names = value
     esp.Names = WoUStuff.names
end})
fsect2:AddColor({text = 'Esp Color',color = Color3.new(0.439215, 0, 0),callback = function(v)
     WoUStuff.espcolor = v
     esp.Color = WoUStuff.espcolor
end})
msect2:AddToggle({text = 'Noclip',state = WoUStuff.noclip,tip = 'Useful For Farms',callback = function(value)
     WoUStuff.noclip = value
     spawn(function()
          while WoUStuff.noclip and task.wait() do
               nc()
          end
     end)
end})
msect2:AddButton({text = 'Join Lower Server',tip = 'If One Exists',callback = function()
     serverhop()
end})
msect2:AddButton({text = 'Rejoin',tip = "Doesn't Work for Private Servers",callback = function()
     rejoin()
end})
local Warning = library:AddWarning({type = "confirm"});
SettingSection:AddLabel('Credits:W.o.U#9140')
SettingSection:AddBind({text = "Open / Close", flag = "UI Toggle", nomouse = true, key = "RightControl", callback = function()
     library:Close();
end});
SettingSection:AddColor({text = "Accent Color", flag = "Menu Accent Color", color = Color3.fromRGB(190,1,1), callback = function(color)
     if library.currentTab then
         library.currentTab.button.TextColor3 = color;
     end
     for i,v in pairs(library.theme) do
         v[(v.ClassName == "TextLabel" and "TextColor3") or (v.ClassName == "ImageLabel" and "ImageColor3") or "BackgroundColor3"] = color;
     end
end});
 -- [Background List]
local backgroundlist = {
     Floral = "rbxassetid://5553946656",
     Flowers = "rbxassetid://6071575925",
     Circles = "rbxassetid://6071579801",
     Hearts = "rbxassetid://6073763717"
};
 -- [Background List]
local back = SettingSection:AddList({text = "Background", max = 4, flag = "background", values = {"Floral", "Flowers", "Circles", "Hearts"}, value = "Flowers", callback = function(v)
     if library.main then
         library.main.Image = backgroundlist[v];
     end
end});
 -- [Background Color Picker]
back:AddColor({flag = "backgroundcolor", color = Color3.new(), callback = function(color)
     if library.main then
         library.main.ImageColor3 = color;
     end
end, trans = 1, calltrans = function(trans)
     if library.main then
         library.main.ImageTransparency = 1 - trans;
     end
end});
 -- [Tile Size Slider]
SettingSection:AddSlider({text = "Tile Size", min = 50, max = 500, value = 500, callback = function(size)
     if library.main then
         library.main.TileSize = UDim2.new(0, size, 0, size);
     end
end});
 -- [Discord Button]
SettingSection:AddToggle({text = 'Auto Save UI Settings',flag = 'autosave',state = WoUStuff.autosave,callback = function(value)
     WoUStuff.autosave = value
     spawn(function()
          while WoUStuff.autosave and task.wait() do 
               writefile("W.o.U's Custom Folder//"..game.Players.LocalPlayer.Name.."_"..gamename.."_".."autosave.json",game.HttpService:JSONEncode(configs))
          end
     end)
 end})
SettingSection:AddButton({text = "Join My Discord", callback = function()
     setclipboard("https://discord.gg/u3WAkxKzKb")
     httprequest({
          Url = "http://127.0.0.1:6463/rpc?v=1",
          Method = "POST",
          Headers = {
               ["Content-Type"] = "application/json",
               ["origin"] = "https://discord.com",
          },
          Body = game:GetService("HttpService"):JSONEncode({
               ["args"] = {
                    ["code"] = "u3WAkxKzKb",
               },
               ["cmd"] = "INVITE_BROWSER",
               ["nonce"] = "."
          })
     })
end});
 -- [Config Box]
ConfigSection:AddBox({text = "Config Name", skipflag = true});
 
 -- [Config List]
ConfigSection:AddList({text = "Configs", skipflag = true, value = "", flag = "Config List", values = library:GetConfigs()});
 
 -- [Create Button]
ConfigSection:AddButton({text = "Create", callback = function()
     library:GetConfigs();
     writefile(library.foldername .. "/" .. library.flags["Config Name"] .. library.fileext,"{}");
     library.options["Config List"]:AddValue(library.flags["Config Name"]);
end});
 
 -- [Save Button]
ConfigSection:AddButton({text = "Save", callback = function()
     local r, g, b = library.round(library.flags["Menu Accent Color"]);
     Warning.text = "Are you sure you want to save the current settings to config <font color='rgb(" .. r .. "," .. g .. "," .. b .. ")'>" .. library.flags["Config List"] .. "</font>?";
     if Warning:Show() then
         library:SaveConfig(library.flags["Config List"]);
     end
end});
 
 -- [Load Button]
ConfigSection:AddButton({text = "Load", callback = function()
     local r, g, b = library.round(library.flags["Menu Accent Color"]);
     Warning.text = "Are you sure you want to load config <font color='rgb(" .. r .. "," .. g .. "," .. b .. ")'>" .. library.flags["Config List"] .. "</font>?";
     if Warning:Show() then
         library:LoadConfig(library.flags["Config List"]);
     end
end});
 
 -- [Delete Button]
ConfigSection:AddButton({text = "Delete", callback = function()
     local r, g, b = library.round(library.flags["Menu Accent Color"]);
     Warning.text = "Are you sure you want to delete config <font color='rgb(" .. r .. "," .. g .. "," .. b .. ")'>" .. library.flags["Config List"] .. "</font>?";
     if Warning:Show() then
         local config = library.flags["Config List"];
          if table.find(library:GetConfigs(), config) and isfile(library.foldername .. "/" .. config .. library.fileext) then
               library.options["Config List"]:RemoveValue(config);
               delfile(library.foldername .. "/" .. config .. library.fileext);
          end
     end
end});
 -- [Init] --------------------------------------------------------------------------------------------------------------------------------------------------------------------
library:Init();
library:selectTab(library.tabs[1]);
